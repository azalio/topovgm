name: Test

on:
  pull_request:
    paths-ignore:
      - "**/*.md"
  push:
    paths-ignore:
      - "**/*.md"
    branches:
      - "main"
env:
  IMAGE_NAME: topovgm
  IMAGE_ARTIFACT: topovgm-ci-container-image
jobs:
  image:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          outputs: type=docker,dest=/tmp/${{ env.IMAGE_ARTIFACT }}.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max
        env:
          DOCKER_METADATA_ANNOTATIONS_LEVELS: manifest,index
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_ARTIFACT }}
          path: /tmp/${{ env.IMAGE_ARTIFACT }}.tar
    outputs:
      meta: ${{ steps.meta.outputs.json }}

  unit-tests:
    env:
      GOTOOLCHAIN: local
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: [ '1.22.5' ]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Go ${{ matrix.go-version }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go-version }}
      - name: Display Go version
        run: go version
      - name: Run tests
        run: sudo make test

  e2e-minikube:
    needs: image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version-file: "go.mod"
      - name: cache go dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
          key: go-${{ hashFiles('go.sum', 'Makefile') }}
          restore-keys: |
            go-

      - name: Get Image from Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_ARTIFACT }}
          path: /tmp

      - name: install dependencies of minikube
        env:
          CNI_PLUGINS_VERSION: v1.5.1
          CRI_DOCKERD_VERSION: v0.3.14
          CRICTL_VERSION: v1.30.1
        run: |
          curl -L -o cni-plugins.tgz https://github.com/containernetworking/plugins/releases/download/${{ env.CNI_PLUGINS_VERSION }}/cni-plugins-linux-amd64-${{ env.CNI_PLUGINS_VERSION }}.tgz
          sudo mkdir -p /opt/cni/bin
          sudo tar -C /opt/cni/bin -xzf cni-plugins.tgz

          # Install cri-docker
          git clone -n https://github.com/Mirantis/cri-dockerd
          cd cri-dockerd
          git checkout ${{ env.CRI_DOCKERD_VERSION }}
          mkdir bin
          go get && go build -o bin/cri-dockerd
          mkdir -p /usr/local/bin
          sudo install -o root -g root -m 0755 bin/cri-dockerd /usr/local/bin/cri-dockerd
          sudo cp -a packaging/systemd/* /etc/systemd/system
          sudo sed -i -e 's,/usr/bin/cri-dockerd,/usr/local/bin/cri-dockerd,' /etc/systemd/system/cri-docker.service

          # This is a workaround for the following issue.
          # https://github.com/kubernetes/minikube/issues/15265
          sudo ln -s /usr/local/bin/cri-dockerd /usr/bin/cri-dockerd

          sudo systemctl daemon-reload
          sudo systemctl enable cri-docker.service
          sudo systemctl enable --now cri-docker.socket
          curl -L https://github.com/kubernetes-sigs/cri-tools/releases/download/${{ env.CRICTL_VERSION }}/crictl-${{ env.CRICTL_VERSION }}-linux-amd64.tar.gz --output crictl-${{ env.CRICTL_VERSION }}-linux-amd64.tar.gz
          sudo tar zxvf crictl-${{ env.CRICTL_VERSION }}-linux-amd64.tar.gz -C /usr/local/bin
      - run: make -C test/e2e setup
      - run: make -C test/e2e launch
      - name: set node name on sample
        run: |
          DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends yq
          yq -i -e ".spec.nodeName = \"$(kubectl get node -oyaml | yq -r .items[0].metadata.name)\"" config/samples/topolvm_v1alpha1_volumegroup.yaml
      - name: Load image into Docker
        run: |
          docker load --input /tmp/${{ env.IMAGE_ARTIFACT }}.tar
          docker image ls -a
      - run: make test-e2e
        env:
          IMAGE_NAME: ${{ fromJSON(needs.image.outputs.meta).tags[0] }}


  e2e-k3d:
    env:
      K3D_NODE_IMAGE: localhost/k3d-node-image
    needs: image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.K3D_NODE_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}},enable=${{ !startsWith(github.ref, 'refs/tags/v0.') }}
      - name: Build and export
        uses: docker/build-push-action@v6
        with:
          file: hack/k3s.Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          annotations: ${{ steps.meta.outputs.annotations }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=image
      - run: DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends yq
      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash
      - name: Create k3d cluster with Flannel
        run: |
          k3d cluster create \
            --image ${{ fromJSON(steps.meta.outputs.json).tags[0] }} \
            --k3s-arg "--disable=traefik@server:*" \
            --k3s-arg "--disable=servicelb@server:*" \
            --k3s-arg "--node-name=test-node"@server:0 \
            --volume /dev:/dev
      - name: Access loop device from nodes
        run: |
          for node in $(k3d node list -o json | jq -r '.[].name'); do
            docker exec $node ls /dev/loop*
          done
      - name: set node name on sample
        run: |
          yq -i -e ".spec.nodeName = \"$(kubectl get node -oyaml | yq -r .items[0].metadata.name)\"" config/samples/topolvm_v1alpha1_volumegroup.yaml
        env:
          DEBIAN_FRONTEND: noninteractive
      - name: Get Image from Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.IMAGE_ARTIFACT }}
          path: /tmp
      - name: Load image
        run: |
          k3d image import /tmp/${{ env.IMAGE_ARTIFACT }}.tar

      - run: make test-e2e
        env:
          IMAGE_NAME: ${{ fromJSON(needs.image.outputs.meta).tags[0] }}